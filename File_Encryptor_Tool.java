
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.security.MessageDigest;
import java.util.Arrays;
import javax.swing.*;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author VCS
 */
public class File_Encryptor_Tool extends javax.swing.JFrame {

    /**
     * Creates new form File_Ecncryptor_Tool
     */
    public File_Encryptor_Tool() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jPasswordField2 = new javax.swing.JPasswordField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jToggleButton1 = new javax.swing.JToggleButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        jLabel1.setText("File Encryptor Tool");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel2.setText("Select a File :");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel3.setText("Enter Secret Key :");

        jTextField1.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jPasswordField2.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jPasswordField2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jPasswordField2ActionPerformed(evt);
            }
        });

        jButton1.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jButton1.setText("Browse");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jButton2.setText("Encrypt");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jButton3.setText("Decrypt");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jButton4.setText("Cancel");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jToggleButton1.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jToggleButton1.setText("Show");
        jToggleButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(39, 39, 39)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 358, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton1)
                        .addGap(36, 36, 36))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 399, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(26, 26, 26)
                                .addComponent(jPasswordField2, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(29, 29, 29)
                                .addComponent(jToggleButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(43, 43, 43))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGap(82, 82, 82)
                                .addComponent(jButton2)
                                .addGap(105, 105, 105)
                                .addComponent(jButton3)
                                .addGap(107, 107, 107)
                                .addComponent(jButton4)))
                        .addGap(80, 125, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(jLabel1)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(52, 52, 52)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton1)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addGap(55, 55, 55)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jPasswordField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jToggleButton1))
                        .addContainerGap(135, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton2)
                            .addComponent(jButton3)
                            .addComponent(jButton4))
                        .addGap(61, 61, 61))))
        );

        pack();
    }// </editor-fold>                        

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {                                            
        // TODO add your handling code here:
    }                                           

    private void jPasswordField2ActionPerformed(java.awt.event.ActionEvent evt) {                                                
        // TODO add your handling code here:
        // Retrieve the entered password
        char[] passwordChars = jPasswordField2.getPassword();
        String password = new String(passwordChars);

        if (password.length() < 8) {
            JOptionPane.showMessageDialog(this, "Password should be at least 8 characters long.", "Invalid Password", JOptionPane.WARNING_MESSAGE);
            return;
        }

        Arrays.fill(passwordChars, '\0');
    }                                               

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        // TODO add your handling code here:
        //Decrypt button action to decrypt the selected encrypted file
        // we Split the file paths from text field into an array
        String[] filePaths = jTextField1.getText().split("; ");
        char[] passwordChars = jPasswordField2.getPassword();
        String key = new String(passwordChars);

        if (filePaths.length == 0 || key.isEmpty()) 
        {
          JOptionPane.showMessageDialog(this, "Please provide files and a secret key.", "Error", JOptionPane.ERROR_MESSAGE);
          return;
        }
        for (int index = 0; index < filePaths.length; index++) 
        {
        String filePath = filePaths[index];

        if (filePath.isEmpty()) continue; 
        
        try {
            File inputFile = new File(filePath.trim());
            File decryptedFile = new File(filePath.trim().replace(".enc", ".dec"));
            processFile(key, inputFile, decryptedFile, false);
            JOptionPane.showMessageDialog(this, "File decrypted successfully: " + decryptedFile.getAbsolutePath(), "Success", JOptionPane.INFORMATION_MESSAGE);
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, "Decryption failed: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        } finally {
            Arrays.fill(passwordChars, '\0');
        }
    }
    }                                        

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        // TODO add your handling code here:
        // Browse button action to select a file
        // This creates a JFileChooser object that opens in the current directory.
        JFileChooser fileChooser = new JFileChooser(); 
        // Allow multi-file selection
        fileChooser.setMultiSelectionEnabled(true); 
        int result = fileChooser.showOpenDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) 
        {   
        // Get selected files as an array
        File[] selectedFiles = fileChooser.getSelectedFiles();
        // Use StringBuilder to efficiently build the file paths string
        StringBuilder filePaths = new StringBuilder();
     
        for (int i = 0; i < selectedFiles.length; i++) 
        {
            filePaths.append(selectedFiles[i].getAbsolutePath());
            if (i < selectedFiles.length - 1) 
            {
                filePaths.append("; "); // Add separator except after the last file
            }
        }
        // Set the combined file paths in the text field
        jTextField1.setText(filePaths.toString()); 
        }
    }                                        

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        // TODO add your handling code here:
        // Encrypt button action to encrypt the selected0 file
        // we Split the file paths from  text field into an array
        String[] filePaths = jTextField1.getText().split("; ");
        char[] passwordChars = jPasswordField2.getPassword();
        String key = new String(passwordChars);

        if (filePaths.length == 0 || key.isEmpty()) 
        {
         JOptionPane.showMessageDialog(this, "Please provide files and a secret key.", "Error", JOptionPane.ERROR_MESSAGE);
         return;
        }

        for (int index = 0; index < filePaths.length; index++) 
        {
        String filePath = filePaths[index];

        if (filePath.isEmpty()) continue; 

        try {
            File inputFile = new File(filePath.trim());
            File encryptedFile = new File(filePath.trim() + ".enc");
            if (!inputFile.exists() || !inputFile.isFile()) 
            {
                JOptionPane.showMessageDialog(this, "The specified file does not exist: " + filePath, "Error", JOptionPane.ERROR_MESSAGE);
                continue;
            }
            processFile(key, inputFile, encryptedFile, true);
            JOptionPane.showMessageDialog(this, "File encrypted successfully: " + encryptedFile.getAbsolutePath(), "Success", JOptionPane.INFORMATION_MESSAGE);
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, "I/O error: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Encryption failed: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        } finally {
            Arrays.fill(passwordChars, '\0');
        }
    }
    }                                        

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        // TODO add your handling code here:
        // Cancel button action to close the application
        System.exit(0);
    }                                        

    private void jToggleButton1ActionPerformed(java.awt.event.ActionEvent evt) {                                               
        // TODO add your handling code here:
        // Toggle for password visibility
        if (jToggleButton1.isSelected()) 
        {
            //we are using EchoChar to 0 to Show password
            jPasswordField2.setEchoChar((char) 0); 
            jToggleButton1.setText("Hide");
        } 
        else 
        {
            //we are using EchoChar to * to  Hide password
            jPasswordField2.setEchoChar('*'); 
            jToggleButton1.setText("Show");
        }
    }                                              

    /**
     * @param args the command line arguments
     */
    
    private static void processFile(String key, File inputFile, File outputFile, boolean isEncrypt) throws IOException {
        byte[] keyBytes;
        try {
            MessageDigest digest = MessageDigest.getInstance("SHA-256");
            keyBytes = digest.digest(key.getBytes("UTF-8"));
        } catch (Exception ex) {
            throw new RuntimeException("Error hashing the key", ex);
        }

        try (FileInputStream inputStream = new FileInputStream(inputFile);
             FileOutputStream outputStream = new FileOutputStream(outputFile)) {

            if (isEncrypt) {
                outputStream.write(keyBytes);
                outputStream.write("ENCRYPTED".getBytes("UTF-8"));
            } else {
                byte[] storedKeyHash = new byte[32];
                int read = inputStream.read(storedKeyHash);
                if (read != 32) {
                    throw new IOException("Failed to read the key hash from the file.");
                }
                if (!Arrays.equals(storedKeyHash, keyBytes)) {
                    throw new IOException("The secret key does not match the encrypted secret key.");
                }
                byte[] marker = new byte[9];
                read = inputStream.read(marker);
                if (read != 9 || !new String(marker, "UTF-8").equals("ENCRYPTED")) {
                    throw new IOException("The file is not encrypted or the key is incorrect.");
                }
            }

            int nextByte;
            int i = 0;
            while ((nextByte = inputStream.read()) != -1) {
                byte encodedByte = (byte) (nextByte ^ keyBytes[i % keyBytes.length]);
                outputStream.write(encodedByte);
                i++;
            }
        } catch (IOException ex) {
            if (!isEncrypt) {
                throw new IOException("Decryption failed: The file may not be encrypted or the key is incorrect.", ex);
            } else {
                throw new IOException("Encryption failed: An error occurred while processing the file.", ex);
            }
        }
    }
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(File_Encryptor_Tool.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(File_Encryptor_Tool.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(File_Encryptor_Tool.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(File_Encryptor_Tool.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new File_Encryptor_Tool().setVisible(true);
            }
        });
    }

    
    // Variables declaration - do not modify                     
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPasswordField jPasswordField2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JToggleButton jToggleButton1;
    // End of variables declaration                   
}
